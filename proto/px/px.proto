syntax = "proto3";

option java_multiple_files = true;
option java_package = "c.k.px.px";
option java_outer_classname = "BrowserProto";

package px;

service Browser {
    rpc Do(DoRequest) returns (DoResponse) {}
}

message Action {
    oneof action_oneof {
        ClearAndTypeAction clearAndTypeAction = 12;
        ClickAction clickAction = 3;
        ClickAndWaitForNavigationAction clickAndWaitForNavigationAction = 27;
        CloseAction closeAction = 7;
        CookiesAction cookiesAction = 24;
        DeleteCookieAction deleteCookieAction = 26;
        EmulateAction emulateAction = 20;
        EmulateMediaTypeAction emulateMediaTypeAction = 23;
        EvaluateAction evaluateAction = 17;
        FocusAction focusAction = 11;
        GetInnerTextAction getInnerTextAction = 6;
        GotoAction gotoAction = 2;
        KeyDownAction keyDownAction = 9;
        KeyPressAction keyPressAction = 8;
        KeyUpAction keyUpAction = 10;
        LaunchAction launchAction = 1;
        PdfAction pdfAction = 22;
        ReloadAction reloadAction = 18;
        SelectAction selectAction = 5;
        SetCookieAction setCookieAction = 25;
        SetViewportAction setViewportAction = 19;
        StartTracingAction startTracingAction = 14;
        StopTracingAction stopTracingAction = 15;
        ScreenshotAction screenshotAction = 13;
        TapAction tapAction = 21;
        TypeAction typeAction = 4;
        WaitAction waitAction = 16;
    }
}

message ClearAndTypeAction { string selector = 1; string text = 2; }
message ClickAction { string selector = 1; ClickOption option = 2; } // https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#elementhandleclickoptions
message ClickAndWaitForNavigationAction { string selector = 1; ClickOption option = 2; WaitOption waitOption = 3; }
message CloseAction { } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagecloseoptions
message CookiesAction { } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagecookiesurls
message DeleteCookieAction { string name = 1; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagedeletecookiecookies
message DoRequest { repeated Action actions = 1; }
message DoResponse { string result = 1; }
message EmulateAction { string device = 1; } // https://github.com/puppeteer/puppeteer/blob/master/src/DeviceDescriptors.ts
message EmulateMediaTypeAction { string type = 1; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pageemulatemediatypetype
message EvaluateAction { string pageFunction = 1; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pageevaluatepagefunction-args
message FocusAction { string selector = 1; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagefocusselector
message GetInnerTextAction { string selector = 1; }
message GotoAction { string url = 1; } // https://www.google.com
message KeyDownAction { string key = 1; } // https://github.com/puppeteer/puppeteer/blob/master/lib/USKeyboardLayout.js
message KeyPressAction { string key = 1; } // https://github.com/puppeteer/puppeteer/blob/master/lib/USKeyboardLayout.js
message KeyUpAction { string key = 1; } // https://github.com/puppeteer/puppeteer/blob/master/lib/USKeyboardLayout.js
message LaunchAction { bool headless = 1; Viewport defaultViewport = 2; } // https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteerlaunchoptions
message PdfAction { string path = 1; string format = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagepdfoptions
message ReloadAction { } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagereloadoptions
message SelectAction { string selector = 1; repeated string values = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pageselectselector-values
message SetCookieAction { string name = 1; string value = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetcookiecookies
message SetViewportAction { int32 width = 1; int32 height = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetviewportviewport
message StartTracingAction { string path = 1; bool screenshots = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#tracingstartoptions
message StopTracingAction { } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#tracingstop
message ScreenshotAction { string path = 1; bool fullPage = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagescreenshotoptions
message TapAction { string selector = 1; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagetapselector
message TypeAction { string selector = 1; string text = 2; } // https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagetypeselector-text-options
message WaitAction { int32 time = 1; }

message ClickOption { string button = 1; int32 clickCount = 2; }
message WaitOption { int32 timeout = 1; string waitUntil = 2; }
message Viewport {
    int32 width = 1;
    int32 height = 2;
    int32 deviceScaleFactor = 3;
    bool isMobile = 4;
    bool hasTouch = 5;
    bool isLandscape = 6;
}
